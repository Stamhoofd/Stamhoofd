@use '../base/variables' as *;
@use '../base/text-styles' as *;

.view, .st-view .box {
    > main {
        @extend .main-text-container;
    }
}

html.modern {
    overflow: hidden;
    height: 100vh;
}

body.modern {
    // on iOS, we don't set overflow: hidden as that prevents scrolling the body. On Android, it doesn't matter, so better to hide overflow
    @supports not (-webkit-touch-callout: none) {
        //overflow: hidden;
    }

    overflow: hidden;
    height: 100vh;

    #app {
        height: 100vh;
    }
}

body.modern.web-iOS {
    #app {
        height: 200vh;
    }
}

.st-view {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    min-height: calc(var(--vh, 1vh) * 100);
    box-sizing: border-box;
    padding: var(--st-vertical-padding, 20px) 0 var(--st-vertical-padding, 20px) 0;

    padding: calc(var(--st-vertical-padding, 20px) + var(--st-safe-area-top, 0px)) 0 calc(var(--st-vertical-padding, 20px) + var(--st-safe-area-bottom, 0px)) 0;
    
    padding-bottom: calc(var(--st-vertical-padding, 20px) + max(var(--st-safe-area-bottom, 0px), var(--keyboard-height, 0px)));
    transition: padding-bottom 0.2s;
    --current-view-safe-area-top: var(--st-safe-area-top, 0px);

    body.modern & {
        height: 100vh;
        overflow: hidden;
        padding-bottom: 0; //var(--st-safe-area-bottom, 0px);
        padding-top: 0; //var(--st-safe-area-top, 0px);
        transition: none;
        contain: strict;

        > * {
            flex-shrink: 0;
            position: static !important;
            margin-top: 0;

            // Prevent scrolling outer areas when touching the footer or header
            @supports not (overscroll-behavior: contain) {
                touch-action: none;
            }
        }

        > main {
            flex-shrink: 1;
            flex-grow: 1;
            min-height: 0;
            overflow-y: auto;
            -webkit-overflow-scrolling: touch;

            // Prevent scrolling outer scroll area's
            overscroll-behavior: contain;
            position: relative;

            // z-index bug on chrome 93 causes scrollbar to be below content :/
            //z-index: 0;

            // Windows scrollbars
            scrollbar-gutter: stable;

            // Flexbox negative margins are broken on iOS 16 and Safari 16...
            // display: flex;
            // flex-direction: column;
            
            > * {
                flex-shrink: 0;
            }

            touch-action: auto;

            padding-bottom: calc(15px + max(var(--keyboard-height, 0px), var(--bottom-padding, 0px)));
            scroll-padding-bottom: calc(30px + max(var(--keyboard-height, 0px), var(--bottom-padding, 0px)));

            &:first-child {
                padding-top: calc(var(--st-vertical-padding, 20px) + var(--st-safe-area-top, 0px));
            }

            &:last-child {
                padding-bottom: calc(var(--st-vertical-padding, 20px) + max(var(--st-safe-area-bottom, 0px), var(--keyboard-height, 0px), var(--bottom-padding, 0px)));
                scroll-padding-bottom: calc(30px + max(var(--st-safe-area-bottom, 0px), var(--keyboard-height, 0px), var(--bottom-padding, 0px)));
            }


            &~ * {
                padding-top: 0;
                margin-bottom: -300px;
                z-index: 100;
                position: relative;

                // Add some fake bottom padding, so when we animate it, the background stays white
                > div {
                    padding-bottom: calc(var(--st-safe-area-bottom, 0px) + 300px + var(--default-footer-padding, 0px));
                }

                transition: transform 0.2s;
                transform: translateY(
                    calc(
                        -1 * var(--bottom-padding, 0px)
                    )
                );

                // Show above keyboard with a specific class that will move it up
                &.sticky {
                    // Problem: when the keyboard is up,
                    // the safe area (which is already inclused in the bottom padding or keyboard height)
                    // is also added in the toolbar's bottom padding
                    // So we need to make sure we don't add it twice
                    transform: translateY(
                        calc(
                            -1 * max(var(--keyboard-height, 0px), var(--bottom-padding, 0px), var(--st-safe-area-bottom, 0px)) + var(--st-safe-area-bottom, 0px)
                        )
                    );
                }
            }
        }
    }

    body.modern .popup & {
        height: calc(var(--vh, 1vh) * 100);
        min-height: 0;
        max-height: 100vh;
    }

    body.modern .sheet & {
        height: auto;
        min-height: 0;
        max-height: calc(var(--vh, 1vh) * 100);
        contain: content;
    }


    > main {
        // We fixed the safe area, no need to recorrect it again
        --st-safe-area-top: 0px;
        //--keyboard-height: 0px;

        padding: 0 var(--st-horizontal-padding, 40px) 0 var(--st-horizontal-padding, 40px);

        &.limit-width {
            display: flex;
            flex-direction: column;
            flex-grow: 1;
            --st-horizontal-padding: calc((100vw - 900px) / 2);
            --st-horizontal-padding: max(var(--st-view-horizontal-padding), calc((100vw - 900px) / 2));
        }

        > .view {
            margin: calc(-1 * var(--st-vertical-padding, 20px)) calc(-1 * var(--st-horizontal-padding, 40px));
            padding: var(--st-vertical-padding, 20px) 0;
            flex-grow: 1;

            display: flex;
            flex-direction: column;

            > main {
                padding: 0 var(--st-horizontal-padding, 15px) 0 var(--st-horizontal-padding, 15px);
            }
        }

        > .gray-shadow {
            background: $color-background-shade;
            margin-top: 0;
            margin-bottom: calc(-1 * var(--st-vertical-padding, 20px));
            margin-bottom: calc(-1 * var(--st-vertical-padding, 40px) - var(--st-safe-area-bottom, 0px));
            padding-bottom: calc(var(--st-safe-area-bottom, 0px) + var(--st-vertical-padding, 20px));
            padding-top: calc(var(--st-vertical-padding, 20px) + 30px);
            position: relative;
            flex-grow: 1;

            --color-current-background: #{$color-background-shade};
            --color-current-background-shade: #{$color-background-shade-darker};

            &:before {
                content: "";
                background: linear-gradient(0deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.02) 100%);
                height: 60px;
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
            }
        }

        > .white-top {
            background: $color-background;
            margin-bottom: 0;
            flex-grow: 0;
        }
    }

    &.boxed:not(.popup .st-view.boxed) {
        @media (min-width: 801px) and (min-height: 701px) {
            background: $color-background-shade;
            --color-current-background: #{$color-background-shade};
            
            --navigation-bar-margin: 10px;
            --navigation-bar-horizontal-padding: 15px;
        }
        width: 100%;
    }

    > .box {
        display: flex;
        flex-direction: column;

        --color-current-background: #{$color-background};

        > main {
            padding: 0 var(--st-horizontal-padding, 15px) 0 var(--st-horizontal-padding, 15px);
        }

        // the main extend has moved to .box general because CSS stops working (don't know why)

        &:not(.popup .st-view > .box) {
            @media (max-width: 800px) {
                flex-grow: 1;
            }

            @media (max-height: 700px)  {
                max-width: 800px;
                margin: 0px auto;
                min-height: auto;
                width: 100%;
                box-sizing: border-box;
                flex-grow: 1;
            }

            @media (min-width: 801px) and (min-height: 701px)  {
                --st-safe-area-top: 0px;
                max-width: 800px;
                background: $color-background;
                --color-current-background-shade: #{$color-background-shade};
                @include style-side-view-shadow();
                border-radius: $border-radius;
                margin: 0px auto;
                min-height: auto;
                width: 100%;
                box-sizing: border-box;

                padding: var(--st-vertical-padding, 20px) 0 var(--st-vertical-padding, 20px)0;
                
                // With extra top padding safe area default to 20px
                padding: calc(var(--st-vertical-padding, 20px) + var(--st-safe-area-top, 0px)) 0 var(--st-vertical-padding, 20px) 0;

                
            }
        }
    }

    // Save padding if we make changes
    --st-view-horizontal-padding: var(--st-horizontal-padding, 40px);

    .st-toolbar:not(.dont-float) {
        margin-top: auto;
    }

    &.auto {
        min-height: auto;
    }

    @extend .view;

    background: var(--color-current-background, #{$color-background} );

    &.background {
        background: $color-background;
        --color-current-background: #{$color-background};
        --color-current-background-shade: #{$color-background-shade};
    }

    &.shade {
        background: $color-background-shade;
        --color-current-background: #{$color-background-shade};
        --color-current-background-shade: #{$color-background-shade-darker};
    }
}

.sheet .st-view {
    min-height: auto;
}

.popup .st-view {
    > main.limit-width {
        --st-horizontal-padding: var(--st-view-horizontal-padding);
        padding: 0;
    }
}
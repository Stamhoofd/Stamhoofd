import { Data, EmailDecoder, Encodeable } from '@stamhoofd-common/encoding';
import { STError, STErrors } from '@stamhoofd-common/errors';

/// Only used as input
export class RegisterStruct implements Encodeable {
    /// Username
    email: string;

    /// Password
    password: string;

    /**
     * Public key of the user, generated by the client. The client can decide to create a new key. Probably once a year.
     * For administrators, this key needs to get signed by the organization in order to be valid. This signature will get validated by
     * normal users when they need to encrypt data using the public key of administrators
     */
    publicKey: string;

    /**
     * Optional. The signature of the public key when creating administrators. This will get verified immediately. If verification fails, it won't get saved to the database without any notification (brute force protection)
     */
    adminSignature?: string;

    static decode(data: Data): RegisterStruct {
        const errors = new STErrors()

        const struct = new RegisterStruct();
        try {
            struct.email = data.field("email").decode(EmailDecoder);
        } catch (e) {
            errors.addError(e)
        }
        struct.password = data.field("password").string;
        struct.publicKey = data.field("publicKey").key;
        struct.adminSignature = data.optionalField("adminSignature")?.string;

        if (struct.password.length < 10) {
            errors.addError(new STError({
                code: "weak_password",
                message: "Your password should be at least 10 characters long",
                human: "Jouw wachtwoord moet minstens 10 karakters lang zijn. Een wachtwoord van minimum 18 karakters is sterk aan te raden. Tip: gebruik een passwordmanager en genereer een random wachtwoord.",
                field: data.addToCurrentField("password")
            }))
        }

        errors.throwIfNotEmpty()

        return struct;
    }

    encode() {
        return {
            email: this.email,
            password: this.password,
            publicKey: this.publicKey,
            adminSignature: this.adminSignature
        }
    }
}
